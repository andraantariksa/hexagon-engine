#pragma once

#include "glad/glad.h"
#include "Common.h"

namespace Hx { namespace Renderer { namespace Backend { namespace OpenGL {
	
	static uint32 GLResourceUsageDraw[] = {
		GL_STATIC_DRAW,
		GL_STATIC_DRAW,
		GL_DYNAMIC_DRAW,
		GL_STATIC_DRAW
	};

	// GL_NONE == unsupported format
	static uint32 GLResourceInternalFormat[] = {
		GL_NONE,
		GL_RGBA32UI,
		GL_RGBA32F,
		GL_RGBA32UI,
		GL_RGBA32I,
		GL_RGB32I,
		GL_RGB32F,
		GL_RGB32UI,
		GL_RGB32I,
		GL_RGBA16UI,
		GL_RGBA16F,
		GL_RGBA16,
		GL_RGBA16UI,
		GL_RGBA16_SNORM,
		GL_RGBA16I,
		GL_RG32UI,
		GL_RG32F,
		GL_RG32I,
		GL_RG32UI,
		GL_NONE,
		GL_DEPTH32F_STENCIL8,
		GL_NONE,
		GL_NONE,
		GL_RGB10_A2UI,
		GL_RGB10_A2,
		GL_RGB10_A2UI,
		GL_R11F_G11F_B10F,
		GL_RGBA8UI,
		GL_RGBA8,
		GL_SRGB8_ALPHA8,
		GL_RGBA8UI,
		GL_RGBA8_SNORM,
		GL_RGBA8I,
		GL_RG16UI,
		GL_RG16F,
		GL_RG16,
		GL_RG16UI,
		GL_RG16_SNORM,
		GL_RG16I,
		GL_R32UI,
		GL_R32F,
		GL_DEPTH_COMPONENT32F,
		GL_R32UI,
		GL_R32I,
		GL_NONE,
		GL_DEPTH24_STENCIL8,
		GL_NONE,
		GL_NONE,
		GL_RG8UI,
		GL_RG8,
		GL_RG8UI,
		GL_RG8_SNORM,
		GL_RG8I,
		GL_R16UI,
		GL_R16F,
		GL_DEPTH_COMPONENT16,
		GL_R16,
		GL_R16UI,
		GL_R16_SNORM,
		GL_R16I,
		GL_R8UI,
		GL_R8,
		GL_R8UI,
		GL_R8_SNORM,
		GL_R8I,
		GL_NONE,
		GL_NONE,

	};

	// GL_NONE == unsupported format
	static uint32 GLResourceBaseFormat[] = {
		GL_NONE,
		GL_RGBA,
		GL_RGBA,
		GL_RGBA_INTEGER,
		GL_RGBA_INTEGER,
		GL_RGB,
		GL_RGB,
		GL_RGB_INTEGER,
		GL_RGB_INTEGER,
		GL_RGBA,
		GL_RGBA,
		GL_RGBA,
		GL_RGBA_INTEGER,
		GL_RGBA,
		GL_RGBA_INTEGER,
		GL_RG,
		GL_RG,
		GL_RG_INTEGER,
		GL_RG_INTEGER,
		GL_NONE,
		GL_DEPTH_STENCIL,
		GL_NONE,
		GL_NONE,
		GL_RGBA_INTEGER,
		GL_RGBA,
		GL_RGBA_INTEGER,
		GL_RGB,
		GL_RGBA_INTEGER,
		GL_RGBA,
		GL_RGBA,
		GL_RGBA_INTEGER,
		GL_RGBA,
		GL_RGBA_INTEGER,
		GL_RG_INTEGER,
		GL_RG,
		GL_RG,
		GL_RG_INTEGER,
		GL_RG,
		GL_RG_INTEGER,
		GL_RED_INTEGER,
		GL_RED,
		GL_DEPTH_COMPONENT,
		GL_RED_INTEGER,
		GL_RED_INTEGER,
		GL_NONE,
		GL_DEPTH_STENCIL,
		GL_NONE,
		GL_NONE,
		GL_RG_INTEGER,
		GL_RG,
		GL_RG_INTEGER,
		GL_RG,
		GL_RG_INTEGER,
		GL_RED_INTEGER,
		GL_RED,
		GL_DEPTH_COMPONENT,
		GL_RED,
		GL_RED_INTEGER,
		GL_RED,
		GL_RED_INTEGER,
		GL_RED_INTEGER,
		GL_RED,
		GL_RED_INTEGER,
		GL_RED,
		GL_RED_INTEGER,
		GL_NONE,
		GL_NONE,

	};

	// GL_NONE == unsupported format
	static uint32 GLResourceTypeFormat[] = {
		GL_NONE
	};

}}}}
